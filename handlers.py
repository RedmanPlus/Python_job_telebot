from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram_dialog import DialogManager, StartMode
from db.models import User
from loader import dp, bot
from states import DialogState, PostDialogState, SearchVacancyState
from config import CHANNELS_FOR_SUB
from filters import is_user_subscribed

@dp.message_handler(Command('contacts'))
async def send_contact(message: Message):
    await message.answer("""<strong>–ö–∞–Ω–∞–ª—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏:</strong> <a href="https://t.me/best_ITjob?utm_source=devseye_bot">ITJOBS</a>
<strong>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∫–ª–∞–º—ã:</strong> <a href="https://t.me/chri_grafova">Christina Grafova</a>
<strong>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:</strong> <a href="https://t.me/egormk">egormk</a>
<strong>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:</strong>
<a href="https://t.me/arseny_chebyshev">–ê—Ä—Å–µ–Ω–∏–π –ß–µ–±—ã—à–µ–≤</a>
<a href="https://t.me/redman_plus">–ê–Ω—Ç–æ–Ω –†—É–º—è–Ω—Ü–µ–≤</a>""")

@dp.callback_query_handler(lambda c: c.data.startswith('check'))
async def answer_callback(query: CallbackQuery, dialog_manager: DialogManager):
    if await is_user_subscribed(CHANNELS_FOR_SUB, query.from_user.id):
        await query.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        await dialog_manager.start(DialogState.start)
    else:
        text = "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n"
        inline_kbd = InlineKeyboardMarkup(row_width=1)
        [inline_kbd.add(InlineKeyboardButton(text=f"{(await bot.get_chat(channel))['title']}", url=f"https://t.me/{channel[1:]}")) 
    					for channel in CHANNELS_FOR_SUB]
        inline_kbd.add(InlineKeyboardButton(text="‚úÖ–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_sub'))
        await query.message.delete()
        await query.message.answer(text, reply_markup=inline_kbd)

@dp.message_handler(commands=['start', 'help'])
async def start(message: Message, state: FSMContext):
    user_dict = {k: v for k ,v in dict(message.from_user).items() 
	             if k in [field.name for field in User._meta.get_fields()]}
    user = User.objects.filter(id=user_dict['id']).first()
    if not user:
        user = User.objects.create(**user_dict)
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}üëã! –Ø –ø–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ü–û. 
–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ /stack –∏ —è –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏""")
    

@dp.message_handler(commands=['app'])
async def open_webapp(message: Message):
	await message.answer(
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(url=f"https://devseye.ru"))]
				]
        ),
    )

@dp.message_handler(commands=['stack'], state=None)
async def language(message: Message, dialog_manager: DialogManager):
    if await is_user_subscribed(CHANNELS_FOR_SUB, message.from_user.id):
        await dialog_manager.start(DialogState.start)
    else:
        text = "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n"
        inline_kbd = InlineKeyboardMarkup(row_width=1)
        [inline_kbd.add(InlineKeyboardButton(text=f"{(await bot.get_chat(channel))['title']}", url=f"https://t.me/{channel[1:]}")) 
						for channel in CHANNELS_FOR_SUB]
        inline_kbd.add(InlineKeyboardButton(text="‚úÖ–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_sub'))
        await message.answer(text, reply_markup=inline_kbd)


@dp.message_handler(state=PostDialogState.select_min_salary)
async def select_min_salary(message: Message, state: FSMContext):
	min_salary = message.text
	if min_salary.isdigit():
		await state.update_data({'salary_above': min_salary})
		await message.answer(f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –æ—Ç {min_salary}")
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ —à–∞–≥, –Ω–∞–ø–∏—à–∏ '-' ")
		await PostDialogState.next()
	else:
		await message.answer("–¢—É—Ç –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥")

@dp.message_handler(state=PostDialogState.select_location)
async def select_location(message: Message, state: FSMContext):
	location = message.text
	if location != "-":
		await state.update_data({'location': location})
	data = await state.get_data()
	msg = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n"
	for k, v in data.items():
		match k:
			case 'technologies':
				msg += f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {v}" + "\n"
			case 'skill':
				msg += f"–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {v}" + '\n'
			case 'remote':
				msg += f"–£–¥–∞–ª–µ–Ω–Ω–æ: {'–î–∞' if v else '–ù–µ—Ç'}" + "\n"
			case 'relocation':
				msg += f"–†–µ–ª–æ–∫–∞—Ü–∏—è: {'–î–∞' if v else '–ù–µ—Ç'}" + "\n"
			case 'max_salary_currency':
				msg += f"–í–∞–ª—é—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã: {v}" + "\n"
			case 'salary_above':
				msg += f'{f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {v}" if int(v) > 0 else ""}' + "\n"
			case 'location':
				msg += f"–õ–æ–∫–∞—Ü–∏—è: {v}" + "\n"	
	
	await message.answer(msg)
	await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /find")
	await PostDialogState.next()

@dp.message_handler(Command("find"), state=PostDialogState.final_state)
async def list_vacancy(message: Message, state: FSMContext, dialog_manager: DialogManager):
	await dialog_manager.start(SearchVacancyState.searching_vacancy)


@dp.message_handler(Command('find'), state=None)
async def send_to_stack_filling(message: Message):
	await message.answer("–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ /stack")
