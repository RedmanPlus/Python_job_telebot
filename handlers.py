from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram_dialog import DialogManager
from loader import dp
from states import DialogState, PostDialogState, SearchVacancyState

@dp.message_handler(commands=['start', 'help'])
async def start(message: Message, state: FSMContext):
	await message.answer("""–ü—Ä–∏–≤–µ—Çüëã! –Ø –ø–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ü–û. 
–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ /stack –∏ —è –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏""")

@dp.message_handler(commands=['stack'], state=None)
async def language(message: Message, dialog_manager: DialogManager):
	await dialog_manager.start(DialogState.select_technology)

@dp.message_handler(Command('stack'), state=PostDialogState.final_state)
async def language_restart(message: Message, state: FSMContext, dialog_manager: DialogManager):
	await state.finish()
	await dialog_manager.start(DialogState.select_technology)

@dp.message_handler(state=PostDialogState.select_min_salary)
async def select_min_salary(message: Message, state: FSMContext):
	min_salary = message.text
	if min_salary.isdigit():
		await state.update_data({'salary_above': min_salary})
		await message.answer(f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –æ—Ç {min_salary}")
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ —à–∞–≥, –Ω–∞–ø–∏—à–∏—Ç–µ '-' ")
		await PostDialogState.next()
	else:
		await message.answer("–¢—É—Ç –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥")

@dp.message_handler(state=PostDialogState.select_location)
async def select_location(message: Message, state: FSMContext):
	location = message.text
	if location != "-":
		await state.update_data({'location': location})
	data = await state.get_data()
	msg = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n"
	for k, v in data.items():
		match k:
			case 'technologies':
				msg += f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {v}" + "\n"
			case 'skill':
				msg += f"–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {v}" + '\n'
			case 'remote':
				msg += f"–£–¥–∞–ª–µ–Ω–Ω–æ: {'–î–∞' if v else '–ù–µ—Ç'}" + "\n"
			case 'relocation':
				msg += f"–†–µ–ª–æ–∫–∞—Ü–∏—è: {'–î–∞' if v else '–ù–µ—Ç'}" + "\n"
			case 'max_salary_currency':
				msg += f"–í–∞–ª—é—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã: {v}" + "\n"
			case 'salary_above':
				msg += f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {v}" + "\n"
			case 'location':
				msg += f"–õ–æ–∫–∞—Ü–∏—è: {v}" + "\n"	
	
	await message.answer(msg)
	await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /find")
	await PostDialogState.next()

@dp.message_handler(Command("find"), state=PostDialogState.final_state)
async def list_vacancy(message: Message, state: FSMContext, dialog_manager: DialogManager):
	await dialog_manager.start(SearchVacancyState.searching_vacancy)

@dp.message_handler(Command('find'), state=None)
async def send_to_stack_filling(message: Message):
	await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ /stack")

@dp.message_handler(Command('showstack'), state=PostDialogState.final_state)
async def show_stack(message: Message, state: FSMContext):
	data = await state.get_data()
	print(data)
	msg = f"""
–£—Ä–æ–≤–µ–Ω—å: {data['skill']}
–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {data['technologies']}
–ó–ü: –æ—Ç {data['salary_above']}
	"""

	await message.answer(msg)